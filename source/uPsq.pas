
unit uPsq;

interface

uses
  uBitboard, uPiece, uScore, uSquare;

{$include platform.inc}

var
  PSQ: array [TPiece, TSquare] of TScore;

function get_psq_score(p: TPiece; b: TBitboard): TScorePair;

implementation

type
  TPsqTemplate = array [TSquare] of smallint;

const
  MG_PSQ_PAWN: TPsqTemplate = (
       0,   0,   0,   0,   0,   0,   0,   0,
     -58, -28, -12,   5,   5, -12, -28, -58,
     -56, -25, -10,   7,   7, -10, -25, -56,
     -53, -23,  -7,  10,  10,  -7, -23, -53,
     -48, -17,  -2,  15,  15,  -2, -17, -48,
     -46, -15,   0,  17,  17,   0, -15, -46,
     -43, -12,   2,  20,  20,   2, -12, -43,
       0,   0,   0,   0,   0,   0,   0,   0
  );

  EG_PSQ_PAWN: TPsqTemplate = (
       0,   0,   0,   0,   0,   0,   0,   0,
     -17, -23, -28, -33, -33, -28, -23, -17,
     -17, -23, -28, -33, -33, -28, -23, -17,
     -15, -20, -25, -30, -30, -25, -20, -15,
     -12, -17, -23, -28, -28, -23, -17, -12,
     -10, -15, -20, -25, -25, -20, -15, -10,
      -5, -10, -15, -20, -20, -15, -10,  -5,
       0,   0,   0,   0,   0,   0,   0,   0
  );

  MG_PSQ_KNIGHT: TPsqTemplate = (
    -148,-107, -79, -69, -69, -79,-107,-148,
     -92, -51, -23, -12, -12, -23, -51, -92,
     -51, -10,  17,  28,  28,  17, -10, -51,
     -28,  12,  40,  51,  51,  40,  12, -28,
     -12,  28,  56,  66,  66,  56,  28, -12,
     -17,  23,  51,  61,  61,  51,  23, -17,
     -40,   0,  28,  38,  38,  28,   0, -40,
    -307, -53, -25, -15, -15, -25, -53,-307
  );

  EG_PSQ_KNIGHT: TPsqTemplate = (
     -56, -43, -30, -23, -23, -30, -43, -56,
     -38, -20, -10,  -5,  -5, -10, -20, -38,
     -25, -10,   2,   7,   7,   2, -10, -25,
     -15,  -2,  10,  20,  20,  10,  -2, -15,
     -10,   2,  15,  25,  25,  15,   2, -10,
      -7,   7,  20,  25,  25,  20,   7,  -7,
     -20,  -2,   7,  12,  12,   7,  -2, -20,
     -38, -25, -12,  -5,  -5, -12, -25, -38
  );

  MG_PSQ_BISHOP: TPsqTemplate = (
     -17, -20, -28, -33, -33, -28, -20, -17,
      -7,   7,   0,  -5,  -5,   0,   7,  -7,
     -15,   0,  17,  15,  15,  17,   0, -15,
     -20,  -5,  15,  38,  38,  15,  -5, -20,
     -20,  -5,  15,  38,  38,  15,  -5, -20,
     -15,   0,  17,  15,  15,  17,   0, -15,
      -7,   7,   0,  -5,  -5,   0,   7,  -7,
      -5,  -7, -15, -20, -20, -15,  -7,  -5
  );

  EG_PSQ_BISHOP: TPsqTemplate = (
       0,  -2,  -5,  -5,  -5,  -5,  -2,   0,
      -2,   2,   0,   0,   0,   0,   2,  -2,
      -5,   0,   7,   5,   5,   7,   0,  -5,
      -5,   0,   5,  12,  12,   5,   0,  -5,
      -5,   0,   5,  12,  12,   5,   0,  -5,
      -5,   0,   7,   5,   5,   7,   0,  -5,
      -2,   2,   0,   0,   0,   0,   2,  -2,
       0,  -2,  -5,  -5,  -5,  -5,  -2,   0
  );

  MG_PSQ_ROOK: TPsqTemplate = (
     -15,  -8,   0,  10,  10,   0,  -8, -15,
     -15,  -8,   0,  10,  10,   0,  -8, -15,
     -15,  -8,   0,  10,  10,   0,  -8, -15,
     -15,  -8,   0,  10,  10,   0,  -8, -15,
     -15,  -8,   0,  10,  10,   0,  -8, -15,
     -15,  -8,   0,  10,  10,   0,  -8, -15,
     -15,  -8,   0,  10,  10,   0,  -8, -15,
     -15,  -8,   0,  10,  10,   0,  -8, -15
  );

  EG_PSQ_ROOK: TPsqTemplate = (
       0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,
       2,   2,   2,   2,   2,   2,   2,   2,
       2,   2,   2,   2,   2,   2,   2,   2,
       2,   2,   2,   2,   2,   2,   2,   2,
      -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5
  );

  MG_PSQ_QUEEN: TPsqTemplate = (
     -40, -30, -23, -17, -17, -23, -30, -40,
     -17,  -2,   2,   7,   7,   2,  -2, -17,
     -10,   2,  12,  15,  15,  12,   2, -10,
      -5,   7,  15,  23,  23,  15,   7,  -5,
      -5,   7,  15,  23,  23,  15,   7,  -5,
     -10,   2,  12,  15,  15,  12,   2, -10,
     -17,  -2,   2,   7,   7,   2,  -2, -17,
     -28, -17, -10,  -5,  -5, -10, -17, -28
  );

  EG_PSQ_QUEEN: TPsqTemplate = (
     -38, -25, -20, -17, -17, -20, -25, -38,
     -25, -12,  -7,  -5,  -5,  -7, -12, -25,
     -20,  -7,   0,   5,   5,   0,  -7, -20,
     -17,  -5,   5,  12,  12,   5,  -5, -17,
     -17,  -5,   5,  12,  12,   5,  -5, -17,
     -20,  -7,   0,   5,   5,   0,  -7, -20,
     -25, -12,  -7,  -5,  -5,  -7, -12, -25,
     -38, -25, -20, -17, -17, -20, -25, -38
  );

  MG_PSQ_KING: TPsqTemplate = (
     112, 125,  48,  -2,  -2,  48, 125, 112,
     104, 117,  40, -10, -10,  40, 117, 104,
      97, 110,  33, -17, -17,  33, 110,  97,
      89, 102,  25, -25, -25,  25, 102,  89,
      76,  89,  12, -38, -38,  12,  89,  76,
      64,  76,   0, -51, -51,   0,  76,  64,
      38,  51, -25, -76, -76, -25,  51,  38,
      12,  25, -51,-102,-102, -51,  25,  12
  );

  EG_PSQ_KING: TPsqTemplate = (
    -186,-128, -87, -71, -71, -87,-128,-186,
    -102, -38,  -7,   7,   7,  -7, -38,-102,
     -74, -20,  17,  33,  33,  17, -20, -74,
     -58,  -5,  33,  56,  56,  33,  -5, -58,
     -46,   7,  46,  69,  69,  46,   7, -46,
     -61,  -7,  30,  46,  46,  30,  -7, -61,
     -89, -25,   5,  20,  20,   5, -25, -89,
    -135, -76, -35, -20, -20, -35, -76,-135
  );

function get_psq_score(p: TPiece; b: TBitboard): TScorePair;
var
  sq: TSquare;
begin
  result := 0;
  while b <> 0 do begin
    sq := find_lsb(b);
    inc(result, PSQ[p, sq]);
    clear_lsb(b);
  end;
end;

procedure make_psq(pt: TPieceType; const mg, eg: TPsqTemplate);
var
  w, b: TPiece;
  s: TScorePair;
  sq: TSquare;
begin
  w := piece(pt, WHITE); b := piece(pt, BLACK);
  for sq := A1 to H8 do begin
    s := pair(mg[sq], eg[sq]);
    PSQ[w, sq] := s;
    PSQ[b, flip(sq)] := -s;
  end;
end;

initialization

fillchar(PSQ, sizeof(PSQ), 0);
make_psq( PAWN,   MG_PSQ_PAWN,   EG_PSQ_PAWN);
make_psq( KNIGHT, MG_PSQ_KNIGHT, EG_PSQ_KNIGHT);
make_psq( BISHOP, MG_PSQ_BISHOP, EG_PSQ_BISHOP);
make_psq( ROOK,   MG_PSQ_ROOK,   EG_PSQ_ROOK);
make_psq( QUEEN,  MG_PSQ_QUEEN,  EG_PSQ_QUEEN);
make_psq( KING,   MG_PSQ_KING,   EG_PSQ_KING);

end.
